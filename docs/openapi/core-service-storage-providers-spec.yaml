openapi: 3.0.0
info:
  title: Banyan Core Service Storage Provider API
  version: 1.0.0
servers:
  - url: https://beta.data.banyan.computer
paths:
  /hooks/report/{metadata_id}:
    post:
      summary: Report the completion of an upload
      tags:
        - Storage
      operationId: reportUpload
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - name: metadata_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportUploadRequest'
      responses:
        '204':
          description: Upload reported successfully
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hooks/report/health:
    post:
      summary: Report the health of a storage provider
      tags:
        - Storage
      operationId: reportHealth
      security:
        - StorageProviderIdentity: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportHealth'
      responses:
        '204':
          description: Health report accepted
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hooks/prune:
    post:
      summary: Prune blocks that are no longer needed
      tags:
        - Storage
      operationId: pruneBlocks
      security:
        - StorageProviderIdentity: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                type: string
                format: cid
      responses:
        '204':
          description: Blocks pruned successfully
        '400':
          description: Bad request, possibly due to invalid CIDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /hooks/redistribution/{metadata_id}:
    post:
      summary: Complete the redistribution of blocks to a new storage host
      tags:
        - Storage
      operationId: completeRedistribution
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - name: metadata_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CompleteRedistributionRequest'
      responses:
        '204':
          description: Redistribution completed successfully
        '400':
          description: Bad request, possibly due to invalid grant ID or CIDs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/auth/provider_grant/{storage_host_id}:
    get:
      tags:
        - Auth
      summary: Grant a storage provider access to a storage host
      operationId: grantProviderAccess
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - in: path
          name: storage_host_id
          required: true
          schema:
            type: string
          description: The ID of the storage host to grant access to
      responses:
        '200':
          description: Access granted to the storage provider
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProviderGrantResponse'
        '401':
          description: Unauthorized access attempt
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: Storage host not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/deals:
    get:
      summary: Get all deals for the user
      tags:
        - Deals
      operationId: getAllDeals
      security:
        - StorageProviderIdentity: [ ]
      responses:
        '200':
          description: List of all deals
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiDeal'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/deals/{deal_id}:
    get:
      summary: Get a single deal by ID
      operationId: getSingleDeal
      tags:
        - Deals
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - name: deal_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Details of the specified deal
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiDeal'
        '404':
          description: Deal not found or not owned by the user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/deals/{deal_id}/accept:
    post:
      summary: Accept a deal by ID
      tags:
        - Deals
      operationId: acceptDeal
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - name: deal_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deal accepted successfully
        '404':
          description: Deal not found or not in a state that can be accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/v1/deals/{deal_id}/cancel:
    post:
      summary: Cancel a deal by ID
      tags:
        - Deals
      operationId: cancelDeal
      security:
        - StorageProviderIdentity: [ ]
      parameters:
        - name: deal_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Deal cancelled successfully
        '404':
          description: Deal not found or not in a state that can be cancelled
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /api/v1/metrics/traffic:
    post:
      summary: Record the ingress and egress traffic for a storage provider
      tags:
        - Metrics
      operationId: meterTraffic
      security:
        - StorageProviderIdentity: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MeterTrafficRequest'
      responses:
        '200':
          description: Traffic data recorded successfully
        '400':
          description: Bad request, possibly due to invalid timestamp or missing fields
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
components:
  securitySchemes:
    StorageProviderIdentity:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    PruneBlocksHookError:
      type: object
      properties:
        msg:
          type: string
    ReportHealth:
      type: object
      properties:
        build_profile:
          type: string
        features:
          type: array
          items:
            type: string
        version:
          type: string
    ReportUploadRequest:
      type: object
      properties:
        data_size:
          type: integer
          format: int64
        normalized_cids:
          type: array
          items:
            type: string
        storage_authorization_id:
          type: string
    ReportUploadError:
      type: object
      properties:
        msg:
          type: string
    CompleteRedistributionRequest:
      type: object
      properties:
        normalized_cids:
          type: array
          items:
            type: string
        grant_id:
          type: string
    CompleteRedistributionError:
      type: object
      properties:
        msg:
          type: string

    ProviderGrantResponse:
      type: object
      properties:
        token:
          type: string

    ApiDeal:
      type: object
      properties:
        id:
          type: string
        state:
          type: string
        size:
          type: integer
          format: int64

    MeterTrafficRequest:
      type: object
      properties:
        user_id:
          type: string
        ingress:
          type: integer
          format: int64
        egress:
          type: integer
          format: int64
        slot:
          type: integer
          format: int64

    Error:
      type: object
      properties:
        msg:
          type: string