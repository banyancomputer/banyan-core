import { HashAlg, SymmKey, SymmKeyOpts } from '../types';
/**
 * Derive a symmetric key from an input keying material (IKM) using HKDF.
 * @param ikm Input keying material. This need not be key material with high entropy. Passwords are safe.
 * @param salt Optional salt value (a non-secret random value). If not provided, it is set to a string of hash length zeros.
 * @param infoStr Optional context and application specific information.
 * @param hashAlg Hash algorithm to use. Default is SHA-256.
 * @param uses Key usage. Default is encrypt/decrypt.
 * @param opts Optional symmetric key options.
 */
export declare function deriveKey(ikm: string, salt: ArrayBuffer, hashAlg?: HashAlg, uses?: KeyUsage[], opts?: Partial<SymmKeyOpts>): Promise<SymmKey>;
declare const _default: {
    deriveKey: typeof deriveKey;
};
export default _default;
