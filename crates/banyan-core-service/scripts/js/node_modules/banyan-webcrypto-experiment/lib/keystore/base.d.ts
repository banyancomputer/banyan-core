import { CipherText, Config } from '../types.js';
export default class KeyStoreBase {
    cfg: Config;
    protected store: LocalForage;
    constructor(cfg: Config, store: LocalForage);
    static initBase(maybeCfg?: Partial<Config>): Promise<KeyStoreBase>;
    keyExists(keyName: string): Promise<boolean>;
    keyPairExists(keyPairName: string): Promise<boolean>;
    deleteKey(keyName: string): Promise<void>;
    destroy(): Promise<void>;
    getExchangeKeyPair(): Promise<CryptoKeyPair>;
    getWriteKeyPair(): Promise<CryptoKeyPair>;
    deriveEscrowKey(passphrase: string, saltStr?: string, cfg?: Partial<Config>): Promise<string>;
    genSymmKey(keyName: string, uses?: KeyUsage[], cfg?: Partial<Config>): Promise<void>;
    importSymmKey(keyStr: string, keyName: string, uses?: KeyUsage[], cfg?: Partial<Config>): Promise<void>;
    getSymmKey(keyName: string): Promise<CryptoKey>;
    exportSymmKey(keyName: string): Promise<string>;
    encryptWithSymmKey(msg: string, keyName: string, cfg?: Partial<Config>): Promise<string>;
    decryptWithSymmKey(cipherText: string, keyName: string, cfg?: Partial<Config>): Promise<string>;
    wrapKeyWithSymmKey(keyToWrap: CryptoKey, keyName: string): Promise<CipherText>;
    unwrapKeyWithSymmKey(wrappedKey: CipherText, keyName: string, keyParams?: AlgorithmIdentifier, extractable?: boolean, uses?: KeyUsage[]): Promise<CryptoKey>;
}
