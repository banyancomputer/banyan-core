import { SymmKey, SymmKeyOpts } from '../types.js';
/**
 * Generate a new symmetric key
 * @param uses The uses of the key, [ 'encrypt', 'decrypt' ] by default
 * @param opts The options for the key
 * @returns The generated symmetric key
 */
export declare function genKey(uses?: KeyUsage[], opts?: Partial<SymmKeyOpts>): Promise<SymmKey>;
/**
 * Import a symmetric key from a base64 string
 * @param base64key The base64 encoded symmetric key
 * @param uses The uses of the key, [ 'encrypt', 'decrypt' ] by default
 * @param opts The options for the key
 * @returns The imported symmetric key
 */
export declare function importKey(base64key: string, uses?: KeyUsage[], opts?: Partial<SymmKeyOpts>): Promise<SymmKey>;
/**
 * Export a symmetric key to a base64 string
 * @param key The symmetric key to export
 * @returns The base64 encoded symmetric key
 */
export declare function exportKey(key: CryptoKey): Promise<string>;
declare const _default: {
    genKey: typeof genKey;
    importKey: typeof importKey;
    exportKey: typeof exportKey;
};
export default _default;
