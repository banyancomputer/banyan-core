import { EccCurve, KeyUse, PublicKey, SymmKey, PrivateKey } from '../types.js';
/**
 * Generate a new ECC key pair
 * @param curve The curve to use
 * @param use The use of the key pair, either exchange or write
 */
export declare function genKeyPair(curve: EccCurve, use: KeyUse): Promise<CryptoKeyPair>;
/**
 * Import a public key from a base64 string
 * @param base64Key The base64 encoded public key
 * @param curve The curve to use
 * @param use The use of the key pair, either exchange or write
 */
export declare function importPublicKey(base64Key: string, curve: EccCurve, use: KeyUse): Promise<PublicKey>;
/**
 * Import an escrowed private key
 * @param wrappedPrivateKeyStr The wrapped private key to import
 * @param unwrappingKey The symmetric key to use for unwrapping -- This cannot be AES-KW
 * @param curve The curve to use for the recovered key pair
 * @param use The use of the recovered key pair
 */
export declare function importEscrowedPrivateKey(wrappedPrivateKeyStr: string, unwrappingKey: SymmKey, curve: EccCurve, use: KeyUse): Promise<PrivateKey>;
export declare function importEscrowedKeyPair(publicKeyStr: string, wrappedPrivateKeyStr: string, unwrappingKey: SymmKey, curve: EccCurve, use: KeyUse): Promise<CryptoKeyPair>;
/**
 * Export a public key to a base64 string
 * @param publicKey The public key to export
 */
export declare function exportPublicKey(publicKey: PublicKey): Promise<string>;
/**
 * Escrow the private portion of an ECC key pair
 * @param privateKey The private key to escrow
 * @param wrappingKey The symmetric key to use for wrapping
 */
export declare function exportEscrowedPrivateKey(privateKey: PrivateKey, wrappingKey: SymmKey): Promise<string>;
declare const _default: {
    genKeyPair: typeof genKeyPair;
    importPublicKey: typeof importPublicKey;
    exportPublicKey: typeof exportPublicKey;
    exportEscrowedPrivateKey: typeof exportEscrowedPrivateKey;
    importEscrowedPrivateKey: typeof importEscrowedPrivateKey;
    importEscrowedKeyPair: typeof importEscrowedKeyPair;
};
export default _default;
