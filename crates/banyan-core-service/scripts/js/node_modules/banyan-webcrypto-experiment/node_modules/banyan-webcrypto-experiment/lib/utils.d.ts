import { CharSize, EccCurve, Msg } from './types';
export declare function publicExponent(): Uint8Array;
export declare function eccCurveToBitLength(namedCurve: EccCurve): number;
export declare function fingerprintFromBuf(buf: Uint8Array): string;
export declare function joinCipherText(ivBuf: ArrayBuffer, cipherBuf: ArrayBuffer): ArrayBuffer;
export declare function splitCipherText(cipherText: ArrayBuffer, saltLength?: number): [ArrayBuffer, ArrayBuffer];
export declare const normalizeUtf8ToBuf: (msg: Msg) => ArrayBuffer;
export declare const normalizeUtf16ToBuf: (msg: Msg) => ArrayBuffer;
export declare const normalizeBase64ToBuf: (msg: Msg) => ArrayBuffer;
export declare const normalizeUnicodeToBuf: (msg: Msg, charSize: CharSize) => ArrayBuffer;
export declare function arrBufToStr(buf: ArrayBuffer, charSize: CharSize): string;
export declare function arrBufToBase64(buf: ArrayBuffer): string;
export declare function strToArrBuf(str: string, charSize: CharSize): ArrayBuffer;
export declare function base64ToArrBuf(string: string): ArrayBuffer;
export declare function randomBuf(length: number, { max }?: {
    max: number;
}): ArrayBuffer;
export declare function joinBufs(fst: ArrayBuffer, snd: ArrayBuffer): ArrayBuffer;
export declare const normalizeToBuf: (msg: Msg, strConv: (str: string) => ArrayBuffer) => ArrayBuffer;
export declare function structuralClone(obj: any): Promise<unknown>;
declare const _default: {
    joinCipherText: typeof joinCipherText;
    fingerprintFromBuf: typeof fingerprintFromBuf;
    eccCurveToBitLength: typeof eccCurveToBitLength;
    splitCipherText: typeof splitCipherText;
    arrBufToStr: typeof arrBufToStr;
    arrBufToBase64: typeof arrBufToBase64;
    strToArrBuf: typeof strToArrBuf;
    base64ToArrBuf: typeof base64ToArrBuf;
    publicExponent: typeof publicExponent;
    randomBuf: typeof randomBuf;
    joinBufs: typeof joinBufs;
    normalizeUtf8ToBuf: (msg: Msg) => ArrayBuffer;
    normalizeUtf16ToBuf: (msg: Msg) => ArrayBuffer;
    normalizeBase64ToBuf: (msg: Msg) => ArrayBuffer;
    normalizeToBuf: (msg: Msg, strConv: (str: string) => ArrayBuffer) => ArrayBuffer;
    structuralClone: typeof structuralClone;
};
export default _default;
