import KeyStoreBase from '../keystore/base.js';
import { Config, KeyStore, EscrowedKeyPair, CipherText } from '../types.js';
export default class ECCKeyStore extends KeyStoreBase implements KeyStore {
    static init(maybeCfg: Partial<Config>): Promise<ECCKeyStore>;
    genExchangeKeyPair(cfg?: Partial<Config>): Promise<void>;
    genWriteKeyPair(cfg?: Partial<Config>): Promise<void>;
    exportPublicExchangeKey(): Promise<string>;
    exportPublicWriteKey(): Promise<string>;
    fingerprintPublicExchangeKey(): Promise<string>;
    fingerprintPublicWriteKey(): Promise<string>;
    exportEscrowedExchangeKeyPair(cfg?: Partial<Config>): Promise<EscrowedKeyPair>;
    exportEscrowedWriteKeyPair(cfg?: Partial<Config>): Promise<EscrowedKeyPair>;
    importEscrowedExchangeKeyPair(escrowKeyPair: EscrowedKeyPair, cfg?: Partial<Config>): Promise<void>;
    importEscrowedWriteKeyPair(escrowKeyPair: EscrowedKeyPair, cfg?: Partial<Config>): Promise<void>;
    sign(msg: string, cfg?: Partial<Config>): Promise<string>;
    verify(msg: string, sig: string, publicKey: string, cfg?: Partial<Config>): Promise<boolean>;
    encrypt(msg: string, publicKey: string, b64DerivationSaltStr: string, cfg?: Partial<Config>): Promise<string>;
    decrypt(cipherText: string, publicKey: string, derivationSaltStr: string, cfg?: Partial<Config>): Promise<string>;
    wrapKey(key: CryptoKey, publicKey: string, derivationSaltStr: string, cfg?: Partial<Config>): Promise<CipherText>;
    unwrapKey(wrappedKey: CipherText, publicKey: string, derivationSaltStr: string, keyParams?: AlgorithmIdentifier, extractable?: boolean, uses?: KeyUsage[], cfg?: Partial<Config>): Promise<CryptoKey>;
}
