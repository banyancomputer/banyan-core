import { HashAlg, SymmKeyOpts } from '../types';
/**
 * Derive a symmetric key from an input keying material (IKM) using HKDF.
 * @param ikm Input keying material. This must be key material with high entropy. Passwords are not recommended or safe.
 * @param salt  Salt value (a non-secret random value). Make sure to use a unique salt for each key you derive, and use an appropriate length.
 * @param infoStr Optional context and application specific information.
 * @param hashAlg Hash algorithm to use. Default is SHA-256.
 * @param uses Key usage. Default is encrypt/decrypt.
 * @param opts Optional symmetric key options.
 * @returns A promise that resolves to a CryptoKey and the salt used to derive it.
 */
export declare function deriveKey(ikm: ArrayBuffer, salt: ArrayBuffer, infoStr?: string, hashAlg?: HashAlg, uses?: KeyUsage[], opts?: Partial<SymmKeyOpts>): Promise<CryptoKey>;
declare const _default: {
    deriveKey: typeof deriveKey;
};
export default _default;
