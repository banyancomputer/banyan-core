import IDB from '../idb.js';
import keys from './keys.js';
import operations from './operations.js';
import config from '../config.js';
import utils from '../utils.js';
import KeyStoreBase from '../keystore/base.js';
import { KeyUse, CryptoSystem } from '../types.js';
export class RSAKeyStore extends KeyStoreBase {
    static async init(maybeCfg) {
        const cfg = config.normalize({
            ...(maybeCfg || {}),
            type: CryptoSystem.RSA
        });
        const { rsaSize, hashAlg, storeName, exchangeKeyName, writeKeyName } = cfg;
        const store = IDB.createStore(storeName);
        await IDB.createIfDoesNotExist(exchangeKeyName, () => (keys.makeKeypair(rsaSize, hashAlg, KeyUse.Exchange)), store);
        await IDB.createIfDoesNotExist(writeKeyName, () => (keys.makeKeypair(rsaSize, hashAlg, KeyUse.Write)), store);
        return new RSAKeyStore(cfg, store);
    }
    async sign(msg, cfg) {
        const mergedCfg = config.merge(this.cfg, cfg);
        const writeKey = await this.writeKey();
        return utils.arrBufToBase64(await operations.sign(msg, writeKey.privateKey, mergedCfg.charSize));
    }
    async verify(msg, sig, publicKey, cfg) {
        const mergedCfg = config.merge(this.cfg, cfg);
        return operations.verify(msg, sig, publicKey, mergedCfg.charSize, mergedCfg.hashAlg);
    }
    async encrypt(msg, publicKey, cfg) {
        const mergedCfg = config.merge(this.cfg, cfg);
        return utils.arrBufToBase64(await operations.encrypt(msg, publicKey, mergedCfg.charSize, mergedCfg.hashAlg));
    }
    async decrypt(cipherText, publicKey, // unused param so that keystore interfaces match
    cfg) {
        const exchangeKey = await this.exchangeKey();
        const mergedCfg = config.merge(this.cfg, cfg);
        return utils.arrBufToStr(await operations.decrypt(cipherText, exchangeKey.privateKey), mergedCfg.charSize);
    }
    async publicExchangeKey() {
        const exchangeKey = await this.exchangeKey();
        return operations.getPublicKey(exchangeKey);
    }
    async publicWriteKey() {
        const writeKey = await this.writeKey();
        return operations.getPublicKey(writeKey);
    }
}
export default RSAKeyStore;
//# sourceMappingURL=keystore.js.map