export declare function createStore(name: string): LocalForage;
export declare function create(id: string, makeFn: () => Promise<CryptoKeyPair | CryptoKey>, store?: LocalForage): Promise<void>;
export declare function createIfDoesNotExist(id: string, makeFn: () => Promise<CryptoKeyPair | CryptoKey>, store?: LocalForage): Promise<void>;
export declare function put(id: string, key: CryptoKeyPair | CryptoKey, store?: LocalForage): Promise<CryptoKeyPair | CryptoKey>;
export declare function getKeypair(id: string, store?: LocalForage): Promise<CryptoKeyPair | null>;
export declare function getKey(id: string, store?: LocalForage): Promise<CryptoKey | null>;
export declare function get<T>(id: string, checkFn: (obj: unknown) => T | null, store?: LocalForage): Promise<T | null>;
export declare function exists(id: string, store?: LocalForage): Promise<boolean>;
export declare function rm(id: string, store?: LocalForage): Promise<void>;
export declare function dropStore(store: LocalForage): Promise<void>;
export declare function clear(store?: LocalForage): Promise<void>;
declare const _default: {
    createStore: typeof createStore;
    createIfDoesNotExist: typeof createIfDoesNotExist;
    put: typeof put;
    getKeypair: typeof getKeypair;
    getKey: typeof getKey;
    exists: typeof exists;
    rm: typeof rm;
    dropStore: typeof dropStore;
    clear: typeof clear;
};
export default _default;
