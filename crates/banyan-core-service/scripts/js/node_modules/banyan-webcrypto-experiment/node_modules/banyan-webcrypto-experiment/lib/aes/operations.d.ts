import { SymmKey, SymmKeyOpts, SymmWrappingKey, CipherText, Msg } from '../types.js';
/**
 * Encrypt a message with a symmetric key
 * @param msg The message to encrypt
 * @param key The symmetric key to use for encryption
 * @param opts The options for encryption
 * @returns The CipherText (which is just an ArrayBuffer) of form [iv, '.', cipherBytes]
 */
export declare function encryptBytes(msg: Msg, key: SymmKey, opts?: Partial<SymmKeyOpts>): Promise<CipherText>;
/**
 * Decrypt a CipherText of form [iv, '.', cipherBytes] with a symmetric key
 * @param msg The message to decrypt
 * @param key The symmetric key to use for decryption
 * @param opts The options for decryption
 * returns The decrypted message within an ArrayBuffer
 * throws InvalidIvLength
 * throws InvalidCipherTextLength
 * throws UnsupportedSymmCrypto
 */
export declare function decryptBytes(msg: Msg, key: SymmKey, opts?: Partial<SymmKeyOpts>): Promise<ArrayBuffer>;
export declare function encrypt(msg: Msg, key: SymmKey, opts?: Partial<SymmKeyOpts>): Promise<string>;
/**
 * Decrypt a CipherText of form [iv, '.', cipherBytes] with a symmetric key
 * @param msg The message to decrypt
 * @param key The symmetric key to use for decryption
 * @param opts The options for decryption
 * @returns The decrypted message
 * @throws UnsupportedSymmCrypto
 * @throws InvalidIvLength
 * @throws InvalidCipherTextLength
 */
export declare function decrypt(msg: Msg, key: SymmKey, opts?: Partial<SymmKeyOpts>): Promise<string>;
/**
 * Wrap a symmetric key with another symmetric key using AES-KW
 * key: The symmetric key to wrap
 * wrappingKey: The symmetric key to use for wrapping
 * opts: The options for wrapping
 * returns The wrapped key as an ArrayBuffer
 */
export declare function wrapKey(key: CryptoKey, wrappingKey: SymmWrappingKey): Promise<CipherText>;
/**
 * Unwrap a symmetric key with another symmetric key using AES-KW
 * wrappedKey: The wrapped key as an ArrayBuffer
 * unwrappingKey: The symmetric key to use for unwrapping
 * unwrappedKeyAlgParams: The algorithm parameters for the unwrapped key
 * extractable: Whether the unwrapped key is extractable
 * keyUsages: The usages for the unwrapped key
 * returns The unwrapped key as a CryptoKey
 */
export declare function unwrapKey(wrappedKey: CipherText, unwrappingKey: SymmWrappingKey, unwrappedKeyAlgParams: AlgorithmIdentifier, extractable: boolean, keyUsages: KeyUsage[]): Promise<CryptoKey>;
declare const _default: {
    encryptBytes: typeof encryptBytes;
    decryptBytes: typeof decryptBytes;
    encrypt: typeof encrypt;
    decrypt: typeof decrypt;
    wrapKey: typeof wrapKey;
    unwrapKey: typeof unwrapKey;
};
export default _default;
