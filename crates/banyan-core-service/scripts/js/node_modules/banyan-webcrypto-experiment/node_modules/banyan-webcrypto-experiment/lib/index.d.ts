import * as ecc from './ecc/index.js';
import * as utils from './utils.js';
import * as idb from './idb.js';
import * as types from './types.js';
declare const _default: {
    ecc: typeof ecc;
    idb: typeof idb;
    publicExponent(): Uint8Array;
    eccCurveToBitLength(namedCurve: types.EccCurve): number;
    fingerprintFromBuf(buf: Uint8Array): string;
    joinCipherText(ivBuf: ArrayBuffer, cipherBuf: ArrayBuffer): ArrayBuffer;
    splitCipherText(cipherText: ArrayBuffer, saltLength?: number): [ArrayBuffer, ArrayBuffer];
    arrBufToStr(buf: ArrayBuffer, charSize: types.CharSize): string;
    arrBufToBase64(buf: ArrayBuffer): string;
    strToArrBuf(str: string, charSize: types.CharSize): ArrayBuffer;
    base64ToArrBuf(string: string): ArrayBuffer;
    randomBuf(length: number, { max }?: {
        max: number;
    }): ArrayBuffer;
    joinBufs(fst: ArrayBuffer, snd: ArrayBuffer): ArrayBuffer;
    structuralClone(obj: any): Promise<unknown>;
    normalizeUtf8ToBuf: (msg: types.Msg) => ArrayBuffer;
    normalizeUtf16ToBuf: (msg: types.Msg) => ArrayBuffer;
    normalizeBase64ToBuf: (msg: types.Msg) => ArrayBuffer;
    normalizeUnicodeToBuf: (msg: types.Msg, charSize: types.CharSize) => ArrayBuffer;
    normalizeToBuf: (msg: types.Msg, strConv: (str: string) => ArrayBuffer) => ArrayBuffer;
    default: {
        joinCipherText: typeof utils.joinCipherText;
        fingerprintFromBuf: typeof utils.fingerprintFromBuf;
        eccCurveToBitLength: typeof utils.eccCurveToBitLength;
        splitCipherText: typeof utils.splitCipherText;
        arrBufToStr: typeof utils.arrBufToStr;
        arrBufToBase64: typeof utils.arrBufToBase64;
        strToArrBuf: typeof utils.strToArrBuf;
        base64ToArrBuf: typeof utils.base64ToArrBuf;
        publicExponent: typeof utils.publicExponent;
        randomBuf: typeof utils.randomBuf;
        joinBufs: typeof utils.joinBufs;
        normalizeUtf8ToBuf: (msg: types.Msg) => ArrayBuffer;
        normalizeUtf16ToBuf: (msg: types.Msg) => ArrayBuffer;
        normalizeBase64ToBuf: (msg: types.Msg) => ArrayBuffer;
        normalizeToBuf: (msg: types.Msg, strConv: (str: string) => ArrayBuffer) => ArrayBuffer;
        structuralClone: typeof utils.structuralClone;
    };
    normalize(maybeCfg?: Partial<types.Config> | undefined): types.Config;
    eccEnabled(): Promise<boolean>;
    merge(cfg: types.Config, overwrites?: Partial<types.Config>): types.Config;
    symmKeyOpts(cfg: types.Config): Partial<types.SymmKeyOpts>;
    defaultConfig: types.Config;
    ECC_EXCHANGE_ALG: "ECDH";
    ECC_WRITE_ALG: "ECDSA";
    DEFAULT_ECC_CURVE: types.EccCurve.P_384;
    DEFAULT_SALT_LENGTH: 16;
    DEFAULT_SYMM_ALG: types.SymmAlg.AES_GCM;
    DEFAULT_SYMM_KEY_LENGTH: types.SymmKeyLength.B256;
    DEFAULT_HASH_ALG: types.HashAlg.SHA_256;
    DEFAULT_CHAR_SIZE: types.CharSize.B16;
    DEFAULT_STORE_NAME: "keystore";
    DEFAULT_EXCHANGE_KEY_PAIR_NAME: "exchange-key-pair";
    DEFAULT_WRITE_KEY_PAIR_NAME: "write-key-pair";
    DEFAULT_ESCROW_KEY_NAME: "escrow-key";
    ExportKeyFormat: typeof types.ExportKeyFormat;
    CryptoSystem: typeof types.CryptoSystem;
    EccCurve: typeof types.EccCurve;
    SymmAlg: typeof types.SymmAlg;
    SymmKeyLength: typeof types.SymmKeyLength;
    HashAlg: typeof types.HashAlg;
    CharSize: typeof types.CharSize;
    KeyUse: typeof types.KeyUse;
};
export default _default;
