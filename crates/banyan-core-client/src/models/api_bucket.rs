/*
 * Banyan Core Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiBucket {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "owner_id")]
    pub owner_id: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "type")]
    pub r#type: Type,
    #[serde(rename = "storage_class")]
    pub storage_class: StorageClass,
    #[serde(rename = "updated_at", skip_serializing_if = "Option::is_none")]
    pub updated_at: Option<String>,
}

impl ApiBucket {
    pub fn new(id: String, owner_id: String, name: String, r#type: Type, storage_class: StorageClass) -> ApiBucket {
        ApiBucket {
            id,
            owner_id,
            name,
            r#type,
            storage_class,
            updated_at: None,
        }
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "BucketType")]
    BucketType,
}

impl Default for Type {
    fn default() -> Type {
        Self::BucketType
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum StorageClass {
    #[serde(rename = "StorageClass")]
    StorageClass,
}

impl Default for StorageClass {
    fn default() -> StorageClass {
        Self::StorageClass
    }
}

