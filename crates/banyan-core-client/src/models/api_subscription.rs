/*
 * Banyan Core Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiSubscription {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "currently_active", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub currently_active: Option<Option<bool>>,
    #[serde(rename = "service_key")]
    pub service_key: String,
    #[serde(rename = "tax_class")]
    pub tax_class: String,
    #[serde(rename = "title")]
    pub title: String,
    #[serde(rename = "features")]
    pub features: Box<models::ApiSubscriptionFeatures>,
    #[serde(rename = "pricing")]
    pub pricing: Box<models::ApiSubscriptionPricing>,
}

impl ApiSubscription {
    pub fn new(id: String, service_key: String, tax_class: String, title: String, features: models::ApiSubscriptionFeatures, pricing: models::ApiSubscriptionPricing) -> ApiSubscription {
        ApiSubscription {
            id,
            currently_active: None,
            service_key,
            tax_class,
            title,
            features: Box::new(features),
            pricing: Box::new(pricing),
        }
    }
}

