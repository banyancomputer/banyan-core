/*
 * Banyan Core Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct CreateBucketResponse {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<String>,
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<models::BucketType>,
    #[serde(rename = "storage_class", skip_serializing_if = "Option::is_none")]
    pub storage_class: Option<models::StorageClass>,
    #[serde(rename = "initial_bucket_key", skip_serializing_if = "Option::is_none")]
    pub initial_bucket_key: Option<Box<models::ApiBucketKeyResponse>>,
}

impl CreateBucketResponse {
    pub fn new() -> CreateBucketResponse {
        CreateBucketResponse {
            id: None,
            name: None,
            r#type: None,
            storage_class: None,
            initial_bucket_key: None,
        }
    }
}

