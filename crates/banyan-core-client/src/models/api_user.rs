/*
 * Banyan Core Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiUser {
    #[serde(rename = "id")]
    pub id: String,
    #[serde(rename = "email")]
    pub email: String,
    #[serde(rename = "display_name")]
    pub display_name: String,
    #[serde(rename = "locale", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub locale: Option<Option<String>>,
    #[serde(rename = "profile_image", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub profile_image: Option<Option<String>>,
    #[serde(rename = "accepted_tos_at", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub accepted_tos_at: Option<Option<i64>>,
    #[serde(rename = "account_tax_class")]
    pub account_tax_class: String,
    #[serde(rename = "subscription_id")]
    pub subscription_id: String,
    #[serde(rename = "subscription_valid_until", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub subscription_valid_until: Option<Option<String>>,
    #[serde(rename = "monthly_egress", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub monthly_egress: Option<Option<i64>>,
}

impl ApiUser {
    pub fn new(id: String, email: String, display_name: String, account_tax_class: String, subscription_id: String) -> ApiUser {
        ApiUser {
            id,
            email,
            display_name,
            locale: None,
            profile_image: None,
            accepted_tos_at: None,
            account_tax_class,
            subscription_id,
            subscription_valid_until: None,
            monthly_egress: None,
        }
    }
}

