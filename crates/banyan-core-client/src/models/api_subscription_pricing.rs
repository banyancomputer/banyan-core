/*
 * Banyan Core Service API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 * Generated by: https://openapi-generator.tech
 */

use crate::models;

#[derive(Clone, Default, Debug, PartialEq, Serialize, Deserialize)]
pub struct ApiSubscriptionPricing {
    #[serde(rename = "archival", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub archival: Option<Option<f32>>,
    #[serde(rename = "hot_storage", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub hot_storage: Option<Option<f32>>,
    #[serde(rename = "plan_base", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub plan_base: Option<Option<f32>>,
    #[serde(rename = "bandwidth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bandwidth: Option<Option<f32>>,
}

impl ApiSubscriptionPricing {
    pub fn new() -> ApiSubscriptionPricing {
        ApiSubscriptionPricing {
            archival: None,
            hot_storage: None,
            plan_base: None,
            bandwidth: None,
        }
    }
}

